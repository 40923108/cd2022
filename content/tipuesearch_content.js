var tipuesearch = {"pages": [{'title': 'About', 'text': '40923108 \n 倉儲連結： https://github.com/40923108/cd2022 \n 網站連結： https://40923108.github.io/cd2022/ \n', 'tags': '', 'url': 'About.html'}, {'title': 'HW', 'text': '', 'tags': '', 'url': 'HW.html'}, {'title': 'W2', 'text': '分組名單 \n cd2022-ag1 40923101 web \xa0|\xa0 a40923101 repo \xa0| 40923103 web \xa0|\xa0 40923103 repo \xa0| 40923108 web \xa0|\xa0 40923108 repo \xa0| 40923119 web \xa0|\xa0 40923119 repo \xa0| 40971134 web \xa0|\xa0 40971134 repo \xa0| 40923137 web \xa0|\xa0 40923137 repo \xa0| 40923154 web \xa0|\xa0 40923154 repo \xa0| 40923156 web \xa0|\xa0 ZHILIN-0817 repo \xa0| \n cd2022-ag2 40923102 web \xa0 | \xa0 40923102 repo \xa0 | 40923104 web \xa0 | \xa0 40923104 repo \xa0 | 40923105 web \xa0 | \xa0 40923105 repo \xa0 | 40923106 web \xa0 | \xa0 40923106 repo \xa0 | 40923107 web \xa0 | \xa0 40923107 repo \xa0 | 40923109 web \xa0 | \xa0 CYC40923109 repo \xa0 | 40923110 web \xa0 | \xa0 40923110 repo \xa0 | \n cd2022-ag3 40923114 web \xa0 | \xa0 40923114 repo \xa0 | 40923115 web \xa0 | \xa0 jason60714 repo \xa0 | 40923122 web \xa0 | \xa0 40923122 repo \xa0 | 40923129 web \xa0 | \xa0 40923129 repo \xa0 | 40923146 web \xa0 | \xa0 a40923146 repo \xa0 | 40923148 web \xa0 | \xa0 40923148 repo \xa0 | 40923157 web \xa0 | \xa0 40923157 repo \xa0 | \n cd2022-ag4 40923111 web \xa0 | \xa0 40923111 repo \xa0 | 40923116 web \xa0 | \xa0 40923116 repo \xa0 | 40923124 web \xa0 | \xa0 40923124 repo \xa0 | 40923125 web \xa0 | \xa0 40923125 repo \xa0 | 40923126 web \xa0 | \xa0 40923126-1 repo \xa0 | 40923127 web \xa0 | \xa0 40923127-1 repo \xa0 | 40923128 web \xa0 | \xa0 40923128 repo \xa0 | \n cd2022-ag5 40923120 web \xa0 | \xa0 40923120 repo \xa0 | 40923123 web \xa0 | \xa0 40923123 repo \xa0 | 40923133 web \xa0 | \xa0 40923133 repo \xa0 | 40923134 web \xa0 | \xa0 40923134 repo \xa0 | 40923135 web \xa0 | \xa0 40923135 repo \xa0 | 40923139 web \xa0 | \xa0 40923139 repo \xa0 | 40923142 web \xa0 | \xa0 40923142 repo \xa0 | 40923151 web \xa0 | \xa0 40923151 repo \xa0 | \n cd2022-ag6 40923113 web \xa0 | \xa0 40923113 repo \xa0 | 40923131 web \xa0 | \xa0 40923131 repo \xa0 | 40923140 web \xa0 | \xa0 40923140 repo \xa0 | 40923144 web \xa0 | \xa0 40923144 repo \xa0 | 40923149 web \xa0 | \xa0 40923149r repo \xa0 | 40923150 web \xa0 | \xa0 40923150 repo \xa0 | 40923152 web \xa0 | \xa0 40923152 repo \xa0 | \n cd2022-ag7 40823132 web \xa0 | \xa0 40823132 repo \xa0 | 40823143 web \xa0 | \xa0 40823143 repo \xa0 | 40923117 web \xa0 | \xa0 Maxlee999 repo \xa0 | 40923118 web \xa0 | \xa0 40923118 repo \xa0 | 40923136 web \xa0 | \xa0 40923136-1 repo \xa0 | 40923143 web \xa0 | \xa0 40923143 repo \xa0 | 40923145 web \xa0 | \xa0 40923145 repo \xa0 | 40923147 web \xa0 | \xa0 40923147 repo \xa0 | \n \n', 'tags': '', 'url': 'W2.html'}, {'title': 'W3', 'text': '本週任務： \n 38 個接近 NX1980 版本功能的教學影片，需以 Wink 影片互相對照的方式採 NX1980 執行操作進行整理，完成後將所負責的 Wink 教學影片嵌入個人與大分組的 w3 中。 \n 22.Rocker Arm working Drawing \n 概要： 這部影片是講解將立體圖轉成工作圖、標註和剖面的方式，以及如何隱藏線型。 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 23.Nx Linked Body Brake Rotor \n 概要： 講述對原有的零件迴轉修剪、孔的定位等修改變成一個 連體煞車盤。 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 24.Nx Part Family Example \n 概要： 透過所提供的參數模型，對樂高積木陣列組件，創建一個系列的樂高積木。 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 25.Nx Assembly Modeling-Pattern Component \n 概要： 講解如何使用 測量 、 向量的陣列 和 零件約束 以及更 改零件顏色 以便辨認等功能。 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 26.Nx Exploded Views \n 概要： 講述著將一個組合件爆炸後進而轉成爆炸圖並說明如何創立零件表和件號。 \n \n \n \n \n   \n \n \n \n \n \n \n', 'tags': '', 'url': 'W3.html'}, {'title': 'W6', 'text': '啟動Leo \n 在小黑窗啟動 Leo \n \n 點選 File/Open-Outline \n \n 開啟 pelican\xa0 \n 註：此檔存在tmp/cd2022/config下 \n \n 將下列部分的原有的資料，改成 自己的學號 和 標題 和 課程網頁連結 \n \n \n \n 更改此區域可在blog上顯示 標題 、 日期 、 類別 及 網頁存檔名稱 \n 註：每個 slug 的名稱都要 不一樣 。 \n \n 全部修改好後先 File/Save \n 接著對 local-blog 按下 右鍵 ，在按下 Goto Script \n \n 複製此段後即可到小黑窗完成推送。 \n \n', 'tags': '', 'url': 'W6.html'}, {'title': 'W7', 'text': 'uArm 機械手臂透過 Pick and Place 控制流程 \n 使用onshape繪製零件圖： \n \n \n \n \n 組合： \n \n 模擬影片： \n', 'tags': '', 'url': 'W7.html'}, {'title': 'W8', 'text': '零件繪製： \n 組員分別以 Solvespace, NX (12, 1980 或 2008) 及 Onshape完成零件繪製。 \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 繪製眾多零件的 過程相當繁瑣，但透過兩人相互合作我們完成了40多個零件，接著是組合、模擬的部分，這因為比較不熟悉因此需要花更多心力摸索和討論。 \n 組合圖： \n \n 將檔案存成stl檔後，匯入coppeliasim \n GUI slider 控制前三軸作動： \n \n \n \n \n   \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'W8.html'}, {'title': 'W10', 'text': '', 'tags': '', 'url': 'W10.html'}, {'title': 'w10_block_ui', 'text': 'w10_block_ui影片說明： \n 以p1 定義高度，p2 則設為長度，寬度設為 p3。 \n 透過 NXOpen Python API 程式，對無列出長寬尺寸變數的零件進行操控。 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w10_block_ui.html'}, {'title': 'w10_nx_integ', 'text': 'w10_nx_integ影片說明： \n 修改nx的啟動檔，可同步開啟nx12、nx1980、nx2008 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w10_nx_integ.html'}, {'title': 'w10_ssh', 'text': 'w10_ssh影片說明： \n ssh設定的步驟說明 \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w10_ssh.html'}, {'title': 'W11', 'text': '\xa0大組組員須將w8-  w10 協同設計過程所負責的項目內容與心得 推送到 cd2022ag1 \n', 'tags': '', 'url': 'W11.html'}, {'title': 'W12', 'text': '本週任務： \n \n \n cd2022_uarm_nx12_imported.7z 中, 若計入重複引用的零件, 總數有多少? 請列出組成此一 uarm 機械手臂所需的 BOM 列表。 \n Ans： 所需的零件總共有155個。 BOM列表 \n \n \n 若不計入重複引用的零件, 總數有多少?請列出各零件名稱. \n Ans：58個。分別為：M2X4 螺絲、M3X4 内六角圓頭螺絲、M3X5 内六角圓頭螺絲、M3X5 平頭螺絲、M3X5 沉頭螺絲、M3X5 扁平頭鐵鍍鎳螺絲、M3X5 圓頭黑色十字螺絲、M3X6 内六角圓頭螺絲、M3X15 雙通螺絲、M4X5 頂螺絲、M4X6 沉頭螺絲、M4X7 平頭螺絲、M4X10 平頭螺絲、M4X15 平頭螺絲、MF84、2mm導光柱、2mm導熱硅胶片、3Dprint轉接板、5-13-4軸承、6X2.5 磁鐵、8.3X1.5 防滑墊、前端通用件、前端關節、7mm 支撐柱、3mm 鋁支撐柱、三角形連桿軸承壓緊件、三角形連桿、絞鍊、主臂關節2、主臂關節1、電機軸承支撐座_左側、電機軸承支撐座_右側、右側曲柄、輸出軸、右側連桿、左側連桿、4mm 鋁支撐柱、減速箱上殼、減速箱下殼、L型連接件、軸承支撐軸、軸承支撐圈、底座上蓋、底座中間部分、底座蓋、磁编碼器PCB、42進步電機、塑料蓋板。 \n \n \n 當執行機械手臂的設計過程中, 若已知各零件所擬採用的零件材料密度, 請問此一設計中的 uarm 機械手臂的淨重量為多少? \n Ans： 30% 零件採 Steel 製, 其餘採 Aluminum 製, 總重量約 2.2205kg。 \xa0 \xa0 \xa0 \xa0 \xa0全部零件採 Aluminum 製, 總重量約 1.4123kg。 \xa0 \xa0 \xa0 \xa0 \xa0全部零件採 Steel 製, 總重量約 4.1062kg。 \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'W12.html'}, {'title': 'NXOpen Python', 'text': '\n \n \n \n \n \n   \n \n \n \n', 'tags': '', 'url': 'NXOpen Python.html'}, {'title': 'Note', 'text': '', 'tags': '', 'url': 'Note.html'}, {'title': '建立倉儲', 'text': '從課程網頁中提供的連結進去 \n \n \n \n \n 複製網址 Import repository \n \n \n 即可建立倉儲 \n \n', 'tags': '', 'url': '建立倉儲.html'}, {'title': 'Leo', 'text': '在小黑窗啟動 Leo \n \n 點選 File/Open-Outline \n \n 開啟 pelican \n 將下列部分的原有的資料，改成 自己的學號 和 標題 \n \n \n \n \n 修改好後對 local-blog 按下 右鍵 ，在按下 Goto Script \n \n 複製此段後即可推送。 \n \n', 'tags': '', 'url': 'Leo.html'}, {'title': 'Leo上放wink', 'text': '在新增wink原始碼前 \n 增加 <link rel="stylesheet" type="text/css" href="./../cmsimde/static/winkPlayer.css"></p> <script type="text/javascript" src="./../cmsimde/static/winkPlayer.js"></script> \n \n 刪除紅色底線處的文字 \n \n 即可儲存，按照原本的方式 推送 \n \n', 'tags': '', 'url': 'Leo上放wink.html'}, {'title': 'Midterm', 'text': '組員分別以 Solvespace, NX (12, 1980 或 2008) 及 Onshape完成零件繪製。 \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 心得： 繪製眾多零件的過程相當繁瑣，但透過兩人相互合作我們完成了40多個零件，接著是組合、模擬的部分，這因為比較不熟悉因此需要花更多心力摸索和討論。 \n', 'tags': '', 'url': 'Midterm.html'}, {'title': 'Online', 'text': '', 'tags': '', 'url': 'Online.html'}, {'title': 'W13', 'text': '本週任務： \n 下載CoppeliaSim3.0版 \n 並利用Coppeliasim模擬MTB運動的樣子 \n \n \n \n \n \n', 'tags': '', 'url': 'W13.html'}, {'title': 'W14', 'text': 'MTB_nx_kinematic.ttt \n 以程式自己作動： \n \n \n \n \xa0 \n \n 以鍵盤控制 MTB_nx 機器人（適用於 CoppeliaSim 4.3.0）： \n \n \n', 'tags': '', 'url': 'W14.html'}, {'title': 'W15', 'text': '利用 UARM 來Tic-Tae-Toe遊戲模擬 \n \n 程式： \n function sysCall_init()\n    axis1=sim.getObject(\'./joint1\')\n    axis2=sim.getObject(\'./joint2\')\n    axis3=sim.getObject(\'./joint3\')\n    suctionPad=sim.getObject(\'/suctionPad\')\n    rotation1 = 0\n    rotation2 = 0\n    rotation3 = 0\n    deg = math.pi/180.\n    enableSuctionPad(true)\nend\nfunction enableSuctionPad(enable)\n    -- use the suctionPad object to pass the variable activity value\n    -- if enable = true, the activity = \'on\'\n    if enable then\n        sim.writeCustomDataBlock(suctionPad,\'activity\',\'on\')\n    else\n        sim.writeCustomDataBlock(suctionPad,\'activity\',\'off\')\n    end\nend\nfunction sysCall_actuation() \n--[[\n    rotation1 = rotation1 + 1*deg\n    print(rotation1)\n    sim.setJointPosition(axis1, -rotation1)\n    sim.setJointPosition(axis2, -rotation1)\n]]\n    message, auxiliaryData=sim.getSimulatorMessage()\n    while message ~= -1 do\n        key=auxiliaryData[1]\n        sim.addStatusbarMessage(\'user press key:\'..key)\n        if (message==sim.message_keypress) then\n           --if (auxiliaryData[1]==112) then --p activate the suction pad\n            if (auxiliaryData[1]==string.byte(\'p\')) then\n                -- if key p pressed activate the suction mode\n--sim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),\'active\',\'true\')\n                enableSuctionPad(true)\n            end -- if p\n            if (auxiliaryData[1]==string.byte(\'q\')) then --q deactivate the suction pad\n                -- if key q pressed deactivate the suction mode\n--sim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),\'active\',\'false\')\n                enableSuctionPad(false)\n            end -- if q\n            if (auxiliaryData[1]==string.byte(\'k\')) then --k right turn in degree\n                -- if key k pressed axis1 angle adds 2 degrees\n                 rotation1 = rotation1 + 2*deg\n                 --sim.setJointPosition(axis1, rotation1)\n                 sim.setJointTargetPosition(axis1, rotation1)\n            end -- if k\n            if (auxiliaryData[1]==string.byte(\'l\')) then --l left turn in degree\n                -- if key l pressed axis1 angle substract 2 degrees\n                 rotation1 = rotation1 - 2*deg\n                 --sim.setJointPosition(axis1, rotation1)\n                 sim.setJointTargetPosition(axis1, rotation1)\n            end -- if l\n-- for joint2 start ##########################################################\n            if (auxiliaryData[1]== string.byte("h")) then --r right turn in degree\n                -- if key r pressed axis1 angle adds 2 degrees\n                 rotation2 = rotation2 + 1*deg\n                 --sim.setJointPosition(axis2, rotation2)\n                 sim.setJointTargetPosition(axis2, rotation2)\n            end -- if k\n            if (auxiliaryData[1]==string.byte("j")) then\n                -- if key j pressed axis2 angle substract 2 degrees\n                 rotation2 = rotation2 - 1*deg\n                 --sim.setJointPosition(axis2, rotation2)\n                 sim.setJointTargetPosition(axis2, rotation2)\n            end -- if j\n-- for joint2 end ##########################################################\n-- for joint3 start ##########################################################\n            if (auxiliaryData[1]== string.byte("f")) then\n                -- if key f pressed axis3 angle adds 2 degrees\n                 rotation3 = rotation3 + 1*deg\n                 --sim.setJointPosition(axis3, rotation3)\n                 sim.setJointTargetPosition(axis3, rotation3)\n            end -- if f\n            if (auxiliaryData[1]==string.byte("g")) then\n                -- if key g pressed axis3 angle substract 2 degrees\n                 rotation3 = rotation3 - 1*deg\n                 --sim.setJointPosition(axis3, rotation3)\n                 sim.setJointTargetPosition(axis3, rotation3)\n            end -- if g\n-- for joint3 end ##########################################################\n            if (auxiliaryData[1]==99) then --c coordinate of block\n                blockPosition = sim.getObjectPosition(block, BaseFrame)\n                sim.addStatusbarMessage("coordinate:"..table_to_string(blockPosition))\n            end --if c\n       end  -- if\n    message, auxiliaryData=sim.getSimulatorMessage()\n    end -- while\nend -- function\n \nfunction sysCall_sensing() \n--[[\n    -- Read Proximity sensor (0= nothing detected, 1 = object detected)\n    local res = sim.readProximitySensor(proximity)\n \n    -- Check if possible to insert an new box\n    if (sim.getSimulationTime()-T_last_inserted > T_insert) and not hasStopped then\n        insertBox()\n    end\n \n    -- If proximity sensor detects an object, stop the belt, stop inserting objects\n    if res == 1 and not hasStopped then\n        if boolList[1] then\n            sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",0)\n            deltaTime = sim.getSimulationTime()-T_last_inserted\n            hasStopped = true\n        else\n            local box = table.remove(boxList,1)\n            local boxDummy = table.remove(boxDummyList,1)\n            table.remove(boolList,1)\n \n            sim.removeObject(box)\n            sim.removeObject(boxDummy)\n        end\n    end\n \n    -- If proximity sensor detects nothing and belt has stopped, start belt, continue inserting\n    if res == 0 and hasStopped then\n        sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",beltSpeed)\n        hasStopped = false\n        T_last_inserted = sim.getSimulationTime()-deltaTime\n    end\n     \n]]--\nend\nfunction sysCall_sensing()\n    -- put your sensing code here\nend\nfunction sysCall_cleanup()\n    -- do some clean-up here\nend\n-- Convert a lua table into a lua syntactically correct string\nfunction table_to_string(tbl)\n    local result = "{"\n    for k, v in pairs(tbl) do\n        -- Check the key type (ignore any numerical keys - assume its an array)\n        if type(k) == "string" then\n            result = result.."[\\""..k.."\\"]".."="\n        end\n        -- Check the value type\n        if type(v) == "table" then\n            result = result..table_to_string(v)\n        elseif type(v) == "boolean" then\n            result = result..tostring(v)\n        else\n            v = round(v, 4)\n            result = result.."\\""..v.."\\""\n        end\n        result = result..","\n    end\n    -- Remove leading commas from the result\n    if result ~= "" then\n        result = result:sub(1, result:len()-1)\n    end\n    return result.."}"\nend\nfunction round(x, n)\n    n = math.pow(10, n or 0)\n    x = x * n\n    if x >= 0 then x = math.floor(x + 0.5) else x = math.ceil(x - 0.5) end\n    return x / n\nend\nfunction insertBox()\n    -- Generate random numbers\n    local rand1 = math.random()\n    local rand2 = math.random()\n    local rand3 = math.random()\n    -- Generate random disturbances on position and orientation\n    local dx = (2*rand1-1)*0.1\n    local dy = (2*rand2-1)*0.1\n    local dphi = (2*rand3-1)*0.5\n    local disturbedCoordinates = {0,0,0}\n    disturbedCoordinates[1] = insertCoordinate[1]+dx\n    disturbedCoordinates[2] = insertCoordinate[2]+dy\n    disturbedCoordinates[3] = insertCoordinate[3]\n    -- Copy and paste box and boxDummy\n    local insertedObjects = sim.copyPasteObjects({box,boxDummy},0)\n    -- Update last inserted box time\n    T_last_inserted = sim.getSimulationTime()\n    -- Move and rotate\n    sim.setObjectPosition(insertedObjects[1],-1,disturbedCoordinates)\n    sim.setObjectOrientation(insertedObjects[1],-1,{0,0,dphi})\n    -- Store handles to boxes and dummies\n    table.insert(boxList,insertedObjects[1])\n    table.insert(boxDummyList,insertedObjects[2]) \n    -- Decide if object is good or bad\n    local decision = math.random() \n    if decision <= goodPercentage then\n    -- Object is good, assign goodColor\n        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,goodColor)\n        table.insert(boolList,true)\n    else\n    -- Object is bad, assign random color\n        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,{rand1,rand2,rand3})\n        table.insert(boolList,false)\n    end\nend\n-- See the user manual or the available code snippets for additional callback functions and details \n \n', 'tags': '', 'url': 'W15.html'}, {'title': 'W16', 'text': '', 'tags': '', 'url': 'W16.html'}, {'title': 'Online Exam', 'text': '1.已知左側綠色底座的 uArm 機械手臂, 其基座座標原點位於絕對座標 (1.0, 0.25, 0), 啟動模擬後 green_suctionpad_frame 座標原點則位於 (0.22859, 0.26047, 0.36576), 請列出運算式說明, 啟動模擬後 joint1, joint2 與 joint3 分別以逆時針旋轉 5 度後, 求 green_suctionpad_frame 的絕對座標值? \n Ans：X(0.264)，Y(0.1958)，Z(0.3895) \n \n joint1：k 為逆時針，l 為順時針 \n joint2：h 為逆時針，j 為順時針 \n joint3：f 為逆時針，g 為順時針 \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n \n 2.已知左側 uarm 前方的紅色方塊頂端中心座標值為 (0.2, 0.4, 0.1), 請列出運算式說明左側 uarm 機械手臂的 joint1, joint2 與 joint3 該如何旋轉才能讓 end effector 的吸盤末端中心點移動至紅色方塊頂端中心? \n Ans： joint1順時針10度，joint2逆 時針28度調整，joint3 順時針32度就可以接近紅色方塊的中心。 \n \n joint1：u 為逆時針，i 為順時針 \n joint2：t 為逆時針，y 為順時針 \n joint3：e 為逆時針，r 為順時針 \n \n', 'tags': '', 'url': 'Online Exam.html'}, {'title': 'Visualization Stream', 'text': '利用 OpenCV 結合 Flask 將模擬場景中的 Vision Sensor 影像串流至使用者的瀏覽器端，並透過 Python Remote API 控制伺服器場景與實體機電系統中的制動元件，\xa0可讓使用者透過網際介面觀看並操控遠端場景中的幾何物件。 \n 任務步驟： \n \n 以 CoppeliaSim 4.3.0 rev3 開啟 uarm_nx_tkinter_gui_control.ttt \n 啟動模擬之前, 從  Modules /Connectivity  右方表單中， 點選  Visualization Stream (表 示要啟動場景的視覺串流伺服器)。 \n 啟動 uarm_nx_tkinter_gui_control 場景模擬 \n 將 uarm_tkinter_control.py拉至白窗，並按下 Tools/Go \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'Visualization Stream.html'}, {'title': '期末考週', 'text': '任務一： \n 利用nx修改 "絞鍊"與 "front joint" 零件的外型，並 將Triangular connecting rod與left link及end link等零組件與 right crank與right link的組件左右互換。 \n 組合檔 \n 絞鍊： \n \n 前端關節(front joint)： \n \n \n 任務二： \n 比照舊的零件檔案做些微更改，即可完成。 \n \n 任務三： \n \n 與組員們透過teams會議，由 40923101 分享畫面並教導組員們操控並測試題目所要求的用 XML UI slider控制功能uArm機械手臂，大家也可以用分享螢幕畫面的功能互相討論、教學、透過錄影的功能將會議過程記錄下來，這種方式是一個很棒的學習經驗，也可快速領悟 ! \n \n \n 任務四： \n 協同新幾何外型組立的 uArm 機械手臂場景中, 加入 suctionPad 零件, 以手動操控或程式操控的方式, 錄製 block 方塊零件的取放過程。 \n 這部分比較困難，雖然是用之前的程式就能模擬，但還參雜著程式的操控花了多點時間討論和教導。 \n \n \n \n 任務五： \n', 'tags': '', 'url': '期末考週.html'}]};